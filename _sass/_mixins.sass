//================================
// Variables
//================================

$base-font-size: 16px !default
$base-line-height: 22px !default

//================================
// Placeholders
//================================

%clearfix
  *zoom: 1
  &:before, &:after
    content: " "
    display: table
  &:after
    clear: both

//https://web-design-weekly.com/2013/05/12/handy-sass-mixins/

%strip-list
  margin: 0
  padding: 0
  list-style: none

//==============================
// Functions
//==============================

@function strip-units($value)
  @return $value / ($value * 0 + 1)

@function rem-calc($px, $base-val: $base-font-size)
  @if not unitless($px)
    $px: strip-units($px)
  @if not unitless($base-val)
    $base-val: strip-units($base-val)
  @return $px / $base-val * 1rem

@function em-calc($px, $base-val: $base-font-size)
  @if not unitless($px)
    $px: strip-units($px)
  @if not unitless($base-val)
    $base-val: strip-units($base-val)
  @return $px / $base-val * 1em

@function space($multiple, $base-val: $base-line-height)
  @if not unitless($multiple)
    $multiple: 1
  @return rem-calc($base-line-height) * $multiple


//================================
// Mixins
//================================

=font-size($px)
  font-size: $px
  font-size: rem-calc($px)

=line-height($heightValue: $base-line-height)
  line-height: rem-calc($heightValue)

=opacity($opacity)
  opacity: $opacity
  $opacity-ie: $opacity * 100
  filter: alpha(opacity = $opacity-ie) //IE8

=selection($current-selector: false)
  @if $current-selector
    &::-moz-selection
      @content
    &::selection
      @content
  @else
    ::-moz-selection
      @content
    ::selection
      @content

=text-truncate
  overflow: hidden
  text-overflow: ellipsis
  white-space: nowrap

//================================
// Prefixer
//================================

=prefixer($property, $value, $prefixes)
  @each $prefix in $prefixes
    @if $prefix == webkit
      @if $prefix-for-webkit
        -webkit-#{$property}: $value
    @else if $prefix == moz
      @if $prefix-for-mozilla
        -moz-#{$property}: $value
    @else if $prefix == ms
      @if $prefix-for-microsoft
        -ms-#{$property}: $value
    @else if $prefix == o
      @if $prefix-for-opera
        -o-#{$property}: $value
    @else if $prefix == spec
      @if $prefix-for-spec
        #{$property}: $value
    @else
      @warn "Unrecognized prefix: #{$prefix}"

=disable-prefix-for-all
  $prefix-for-webkit:    false !global
  $prefix-for-mozilla:   false !global
  $prefix-for-microsoft: false !global
  $prefix-for-opera:     false !global
  $prefix-for-spec:      false !global


//  Viewport sized typography with minimum and maximum values
//
//  @author Eduardo Boucas (@eduardoboucas)
//
//  @param {Number}   $responsive  - Viewport-based size
//  @param {Number}   $min         - Minimum font size (px)
//  @param {Number}   $max         - Maximum font size (px)
//                                   (optional)
//  @param {Number}   $fallback    - Fallback for viewport-
//                                   based units (optional)
//
//  @example scss - 5vw font size (with 50px fallback),
//                  minumum of 35px and maximum of 150px
//   @include responsive-font(5vw, 35px, 150px, 50px);
//
=responsive-font($responsive, $min, $max: false, $fallback: false)
  $responsive-unitless: $responsive / ($responsive - $responsive + 1)
  $dimension: if(unit($responsive) == "vh", "height", "width")
  $min-breakpoint: $min / $responsive-unitless * 100
  @media (max-#{$dimension}: #{$min-breakpoint})
    font-size: $min
  @if $max
    $max-breakpoint: $max / $responsive-unitless * 100
    @media (min-#{$dimension}: #{$max-breakpoint})
      font-size: $max
  @if $fallback
    font-size: $fallback
  font-size: $responsive

// Animation

=keyframes($animation-name)
  @-webkit-keyframes #{$animation-name}
    @content

  @-moz-keyframes #{$animation-name}
    @content

  @-ms-keyframes #{$animation-name}
    @content

  @-o-keyframes #{$animation-name}
    @content

  @keyframes #{$animation-name}
    @content

=animation($str)
  +prefixer(animation, $str, webkit moz ms o spec)

=transition($args...)
  -webkit-transition: $args
  -moz-transition: $args
  -ms-transition: $args
  -o-transition: $args
  transition: $args

=transform($args...)
  -webkit-transform: $args
  -moz-transform: $args
  -ms-transform: $args
  -o-transform: $args
  transform: $args

//Responsive

=respond-to($device)
  @if $device == large
    @media only screen and (min-width: 1240px)
      @content
  @else if $device == desktop
    @media only screen and (min-width: 1030px)
      @content
  @else if $device == tablet
    @media only screen and (min-width: 768px)
      @content
  @else if $device == mobile
    @media only screen and (min-width: 481px)
      @content
  @else
    @media only screen and (#{$device})
      @content

// Bourbon columns

=columns($arg: auto)
  // <column-count> || <column-width>
  +prefixer(columns, $arg, webkit moz spec)

=column-count($int: auto)
  // auto || integer
  +prefixer(column-count, $int, webkit moz spec)

=column-gap($length: normal)
  // normal || length
  +prefixer(column-gap, $length, webkit moz spec)

=column-fill($arg: auto)
  // auto || length
  +prefixer(column-fill, $arg, webkit moz spec)

=column-rule($arg)
  // <border-width> || <border-style> || <color>
  +prefixer(column-rule, $arg, webkit moz spec)

=column-rule-color($color)
  +prefixer(column-rule-color, $color, webkit moz spec)

=column-rule-style($style: none)
  // none | hidden | dashed | dotted | double | groove | inset | inset | outset | ridge | solid
  +prefixer(column-rule-style, $style, webkit moz spec)

=column-rule-width($width: none)
  +prefixer(column-rule-width, $width, webkit moz spec)

=column-span($arg: none)
  // none || all
  +prefixer(column-span, $arg, webkit moz spec)

=column-width($length: auto)
  // auto || length
  +prefixer(column-width, $length, webkit moz spec)
